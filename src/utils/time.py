"""Util script for timefunctions"""

import datetime
import random 

def float_to_timeformat_of_day(random_time_of_day: float):
    """Converts a float between 0 and 24 to timeformat of hour,minutes,seconds

    Args:
        random_time_of_day (float): float between 0 and 24

    Returns:
        (tuple): hour in int , minutes in int, seconds in int
    """
    # check for good input
    if random_time_of_day < 24:
        
        hour = int(random_time_of_day)
        
        if hour > 0:
            minutes = int(random_time_of_day % hour * 60)
        else:
            minutes = int(random_time_of_day * 60)
        
        if minutes >0 and hour !=0:
            seconds = int(random_time_of_day % hour * 60  % minutes * 60)
        else:
            seconds = 0
        
        return hour, minutes,seconds 
    
    else:
        print("Error in Function: to high float (24=<..) as input")
        return (0,0,0)
     


def select_random_time_of_a_day(**kwargs):
    """Creates random time of the day. Through **kwargs hour, minutes or seconds can be 
    set individualy on calling the function

    Returns:
        (tuple): CostumTime Tuple with hour, minute and seconds as attribute
    """
    
    from collections import namedtuple
    
    CustomTime = namedtuple('CustomTime', 'hour minute seconds')
    
    random_time_of_day = random.random()*24   #random.random creates in intervall of [0,1)
    
    hour, minutes, seconds = float_to_timeformat_of_day(random_time_of_day)
    
    #set variable to inputs, if costumizable time is wanted
    for key, value in kwargs.items():
        if key =="hour":
            hour = value
        elif key =="minutes":
            minutes = value
        elif key == "seconds":
            seconds = value
        else:
            continue

    return CustomTime(hour=hour, minute=minutes, seconds=seconds)
    

def get_actual_datetime():
    return datetime.datetime.now()


def time_is_passed_by_actualTime(timepoint: tuple):
    """Checks if minutes and houres of timpoint have passed the current time

    Args:
        timepoint (customtimetuple): time tuple generated by select_random_time_of_a_day() function

    Returns:
        (bool): if houre and minutes of timepoint are bigger then current Time
    """
    actual_time = get_actual_datetime()
    return actual_time.hour >= timepoint.hour or (actual_time.hour == timepoint.hour and actual_time.minute >= timepoint.minute)           
    

def check_change_of_day_in_datetimevalues(newer_datetimevalue, old_datetimevalue):
    """Checks if a day has passed. Acesses calender representation of time and not the
    true timedelta

    Args:
        newer_datetimevalue (datetime): the newer time value as datettime.datetime
        old_datetimevalue (datetime): the older time value as datetime.datetime

    Returns:
        (bol): changes within days
    """
    day_value_delta = newer_datetimevalue.day - old_datetimevalue.day
    
    if -1 < day_value_delta < 1:
        return False # Same Day
    if day_value_delta >= 1:
        return True # new day
    if day_value_delta <= -1:
        return True # old day
